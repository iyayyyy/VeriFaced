-- Database creation
CREATE DATABASE IF NOT EXISTS dmsverifaced_db;
USE dmsverifaced_db;

-- Table structure for `admins`
CREATE TABLE admins (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL COMMENT 'Stores hashed passwords using password_hash()',
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert initial admin account
-- IMPORTANT: Replace 'REPLACE_WITH_YOUR_GENERATED_HASH' with the actual hash generated by PHP's password_hash() for 'admin12345'
INSERT INTO admins (email, password_hash, first_name, last_name)
VALUES (
    'admin@verifaced.com',
    'REPLACE_WITH_YOUR_GENERATED_HASH', -- PASTE THE HASHED PASSWORD GENERATED FROM 'admin12345' HERE
    'System',
    'Admin'
);

-- Table structure for `units`
CREATE TABLE units (
    unit_id INT AUTO_INCREMENT PRIMARY KEY,
    unit_number VARCHAR(50) NOT NULL UNIQUE COMMENT 'e.g., "Unit 1", "Unit 2"',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Example Data for units (recommended for testing dropdowns)
INSERT INTO units (unit_number) VALUES
('Unit 1'),
('Unit 2'),
('Unit 3'),
('Unit 4'),
('Unit 5'),
('Unit 6'),
('Unit 7'),
('Unit 8'),
('Unit 9'),
('Unit 10');

-- Table structure for `tenants`
CREATE TABLE tenants (
    tenant_id INT AUTO_INCREMENT PRIMARY KEY,
    unit_id INT NOT NULL COMMENT 'Foreign key to units table',
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL COMMENT 'Stores hashed passwords using password_hash()',
    phone_number VARCHAR(50) NOT NULL,
    -- REMOVED: profile_pic_path VARCHAR(255) COMMENT 'Path to uploaded profile picture',
    -- Known face paths will now serve as the display picture
    known_face_path_1 VARCHAR(255) NULL COMMENT 'Path to first known face image for facial recognition',
    known_face_path_2 VARCHAR(255) NULL COMMENT 'Path to second known face image for facial recognition',
    known_face_path_3 VARCHAR(255) NULL COMMENT 'Path to third known face image for facial recognition',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (unit_id) REFERENCES units(unit_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Example Data for tenants (optional, for testing tenant login/features)
-- IMPORTANT: Replace the example hash placeholders with actual generated hashes.
-- Assuming unit_id 1 is 'Unit 1' and unit_id 2 is 'Unit 2' from the units table above
-- REMOVED: profile_pic_path from the VALUES list
INSERT INTO tenants (unit_id, first_name, last_name, email, password_hash, phone_number, known_face_path_1, known_face_path_2, known_face_path_3)
VALUES
(1, 'Jane', 'Doe', 'jane.doe@example.com', '$2y$10$XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', '09123456789', 'models/known_faces/Unit_1/1.jpg', 'models/known_faces/Unit_1/2.jpg', 'models/known_faces/Unit_1/3.jpg'), -- REPLACE XXXXX... with actual hash
(2, 'John', 'Smith', 'john.smith@example.com', '$2y$10$YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY', '09987654321', 'models/known_faces/Unit_2/1.jpg', 'models/known_faces/Unit_2/2.jpg', 'models/known_faces/Unit_2/3.jpg'); -- REPLACE YYYYY... with actual hash


-- Table structure for `visitors`
CREATE TABLE visitors (
    visitor_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    unit_id INT NOT NULL COMMENT 'Unit ID being visited (from units table)',
    phone_number VARCHAR(50) NOT NULL,
    purpose_of_visit TEXT NOT NULL,
    host_tenant_id INT NOT NULL COMMENT 'Foreign key to tenants table (the tenant being visited)',
    relationship_to_tenant VARCHAR(100),
    profile_pic_path VARCHAR(255) COMMENT 'Path to uploaded face scan image',
    visit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'When the visit was registered',
    status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending' COMMENT 'Status of the visitor request',
    processed_at TIMESTAMP NULL DEFAULT NULL COMMENT 'When the request was accepted/rejected',
    
    -- New columns for email action links
    action_token VARCHAR(255) UNIQUE NULL COMMENT 'Unique token for email action (accept/reject)',
    token_expires_at DATETIME NULL COMMENT 'Timestamp when action_token expires',
    token_used BOOLEAN DEFAULT FALSE COMMENT 'Flag to indicate if the token has been used',

    FOREIGN KEY (unit_id) REFERENCES units(unit_id) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (host_tenant_id) REFERENCES tenants(tenant_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Example Data for visitors (optional)
INSERT INTO visitors (full_name, unit_id, phone_number, purpose_of_visit, host_tenant_id, relationship_to_tenant, profile_pic_path, status)
VALUES
('Alice Wonderland', 1, '09011112222', 'Meeting Jane', 1, 'Friend', './uploads/visitor_faces/alice.png', 'pending'),
('Bob The Builder', 1, '09023334444', 'Repairs', 1, 'Contractor', './uploads/visitor_faces/bob.png', 'accepted'),
('Charlie Chaplin', 2, '09035556666', 'Visit John', 2, 'Family', './uploads/visitor_faces/charlie.png', 'pending');


-- Table structure for `members`
CREATE TABLE members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    tenant_id INT NOT NULL COMMENT 'Foreign key to the primary tenant (owner) this member belongs to',
    full_name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(50),
    relationship_to_tenant VARCHAR(100),
    profile_pic_path VARCHAR(255) COMMENT 'Path to uploaded profile picture for the member',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tenant_id) REFERENCES tenants(tenant_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Example Data for members (optional)
-- Assuming tenant_id 1 is Jane Doe (from tenants table)
INSERT INTO members (tenant_id, full_name, phone_number, relationship_to_tenant, profile_pic_path)
VALUES
(1, 'Jane Jr. Doe', '09998887777', 'Child', './uploads/tenant_profile_pics/jane_jr.png');

CREATE TABLE tenant_activity_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    tenant_id INT NOT NULL,
    action_type VARCHAR(50) NOT NULL, -- e.g., 'check_in', 'check_out'
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tenant_id) REFERENCES tenants(tenant_id) ON DELETE CASCADE
);

CREATE TABLE addedmembers (
    added_member_id INT AUTO_INCREMENT PRIMARY KEY,
    tenant_id INT NOT NULL COMMENT 'Foreign key to the primary tenant (owner) this member belongs to',
    unit_id INT NOT NULL COMMENT 'Foreign key to the units table, inherited from the associated tenant', -- NEW COLUMN
    full_name VARCHAR(255) NOT NULL,
    username VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL COMMENT 'Stores hashed passwords using password_hash()',
    phone_number VARCHAR(50) NOT NULL,
    relationship_to_tenant VARCHAR(100) NOT NULL,
    known_face_path_2 VARCHAR(255) NULL COMMENT 'Path to the registered face scan image for this member',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tenant_id) REFERENCES tenants(tenant_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (unit_id) REFERENCES units(unit_id) ON DELETE RESTRICT ON UPDATE CASCADE -- NEW FOREIGN KEY CONSTRAINT
);

ALTER TABLE visitors
ADD COLUMN specific_host_id INT NULL AFTER host_tenant_id,
ADD COLUMN specific_host_type VARCHAR(20) NULL AFTER specific_host_id;

CREATE INDEX idx_specific_host ON visitors (specific_host_type, specific_host_id);

ALTER TABLE tenants
ADD COLUMN current_status VARCHAR(20) DEFAULT 'Out',
ADD COLUMN last_status_update DATETIME DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE addedmembers
ADD COLUMN current_status VARCHAR(20) DEFAULT 'Out',
ADD COLUMN last_status_update DATETIME DEFAULT CURRENT_TIMESTAMP;

ALTER TABLE tenant_activity_log
ADD COLUMN description TEXT;